################
# <타입>: <제목> 의 형식으로 제목을 아래 공백줄에 작성
# 제목은 50자 이내 / 변경사항이 "무엇"인지 명확히 작성 / 끝에 마침표 금지
# 예) ✨ feat: add login functionality

################
# 본문(구체적인 내용)을 아랫줄에 작성
# 여러 줄의 메시지를 작성할 땐 "-"로 구분 (한 줄은 72자 이내)
################

# 꼬릿말(footer)을 아랫줄에 작성 (현재 커밋과 관련된 이슈 번호 추가 등)
# 예) resolves #1

################
# <프로젝트>
# 🎉 init: 프로젝트 초기 설정
# 🐳 chore: 빌드 스크립트 수정, 패키지 매니저 수정, 기능 외 작업
# 🔧 conf: 설정파일 추가/수정
# 🚀 deploy: 배포
# 🔖 tag: 버전태그, 릴리즈
# 💚 ci: 빌드 시스템 추가/수정
#
# <코드>
# ✨ feat: 새로운 기능 추가
# 🐛 fix: 일반 버그 수정
# 🚨 hotfix: 긴급한 버그 수정
# 🩹 coolfix: 단순한 버그 수정
# 🧪 test: 테스트 추가/수정
# 🚧 cont: 진행중인 작업
# 🔒️ lock: 보안 이슈 수정
# 🚚 rename: 파일 혹은 폴더명 수정/이동
# 🔥 remove: 파일/코드 삭제
# 🎫 assets: 이미지/아이콘 등 assets 추가
# ⚡️ improve: 성능 개선
# ♻️ refactor: 코드 리팩토링
#
# <UI/UX>
# 💄 style: UI 및 Style 파일 추가/수정
# ♿ wai: 접근성 개선
# 
# <문서>
# ✏️ typo: 오타 수정
# 📝 docs: 문서 추가/수정
# 📄 license: 라이센스 추가/수정
# 💬 comment: 주석 추가/수정
# 🔍️ seo: 검색 엔진 최적화 개선
#
# <GIT>
# 🔀 merge: 브랜치 병합
# ⏪ revert: 변경 내용 되돌리기
#
################
#
################
# 참고사항
# - 'git add .'를 통해서 변경사항이 있는 파일을 스테이지에 올린다.
# - 'git commit' 을 누르고 엔터를 치면 위의 템플릿이 나온다.
# - 키보드에서 's'를 누르고 수정한 이후에 모든 커밋메세지를 입력한 후, 해당 파일을 닫는다.
################