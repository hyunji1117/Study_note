[CSS] CSS 속성 메모

단위(Units)
font-size px vs. em 그리고 rem

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>우선순위 선택자</title>
    <link href="https://cdn.jsdelivr.net/npm/reset-css@5.0.2/reset.min.css"
rel="stylesheet">
    <link rel="stylesheet" href="/login/css/style.css">
</head>
<body>
    <div class="parent">
        <div class="child"></div>
    </div>
</body>
</html>

.parent {
  width: 300px;
  height: 200px;
  background-color:lightcoral;
}

.child{
  width: 50%;
  height: 50%;
  background-color:royalblue;
}

기본적으로 font-size는 16px 만큼의 크기가 들어가 있다.

단위 em
폰트 사이즈(16px) 만큼의 1em으로 사용으로 한다.
주변 상황에 따라 상대적으로 폰트 크리가 달라벼 관리가 필요한 단점이 있다.

여기서 Css child width값을 10em으로 바꾸면 16px 곱하기 10으로 160px i.e.160em으로 환산된다. 
동일하게 20em으로  값을 바꾸면 아래와 같이 320px이 출력된다. 

.parent {
  width: 300px;
  height: 200px;
  background-color:lightcoral;
}

.child{
  width: 20em;    /* 16px X 20 = 320px */
  height: 50%;
  background-color:royalblue;
}

만약 부모 요소에 font-size를 10px로 세팅한다면
자식 요소에 상속이 되어 10px X 20 = 200px으로 출력이 된다. 

.parent {
  width: 300px;
  height: 200px;
  background-color:lightcoral;
  font-size: 10px;
}

.child{
  width: 20em;    /* 1px X 20 = 200px */
  height: 50%;
  background-color:royalblue;
}

이렇게 부모 요소 font-size 세팅으로 인해 상대적으로 변하는 특성으로
잘 못 사용하면 혼란스러운 단위가 될 수 있어 별도의 관리가 필요하다. 
그리고 rem은 이런 이슈를 해결해줄 수 있다. 

단위 rem
Html 요소(root요소)에 지정된 폰트 크기를 기준으로 사용한다.
주변 상황이 바뀌어도 단위가 수정되는 일이 없도록 만들어주는 장점이 있다.
루트 요소의 폰트만 바꿔주면 모든 rem 값의 폰트 크기를 동시에 비율로 제어할 수 있다. 

e.g.
html 요소에 font-size를 16px로 세팅한다고 가정
부모 요소에 font-size를 10px로 세팅하여도
결과 값은 16px X 20 = 320px로 출력된다. 
Root 요소에 지정 폰트를 기준으로 사용되는 특성이 반영된 예시라고 볼 수 있다. 

html {
  font-size: 16px;
}

.parent {
  width: 300px;
  height: 200px;
  background-color:lightcoral;
  font-size: 10px;
}

.child{
  width: 20rem;    /* 16px X 20 = 320px */
  height: 50%;
  background-color:royalblue;
}

단위 vw/vh
뷰포트의 가로/세로 넓이/높이의 절반 만큼의 크기를 사용한다.

---------------------------------
외부 여백(margin)

margin : 30px(상하) 80px(좌우);
<body>
    <div class="box"></div>
    <div class="box2"></div>
</body>

.box{
  width: 300px;
  height: 300px;
  margin: 30px 80px;
  background-color: brown;
}

.box2{
  width: 300px;
  height: 300px;
  background-color: brown;
}

margin : 10px(상) 30px(좌우) 80px(하);
.box{
  width: 300px;
  height: 300px;
  margin: 10px 30px 80px;
  background-color: brown;
}

.box2{
  width: 300px;
  height: 300px;
  background-color: brown;
}

margin 음수값 적용 (자주 쓰지 않지만 유용할 때가 있음)
잘 모르겠다.. 좀 더 찾아보고 포스팅할 것

---------------------------------
내부 여백(padding) 
% 부모 요소의 가로 너비에 대한 비율로 지정 (예시 필요 要搞清楚的 Css 심화학습에서 다룬다.)
속성 : (요소의 크기가 늘어남) 내부 여백은 추가되는 것이기에 그 만큼의 요소 크기가 늘어난다.
margin의 음수값 사진으로 정리

---------------------------------
테두리 선(border)과 생상 표현
선 두께 > 선 종류 > 선 색상 (관습에 맞게 작성 권장)]
테두리 선이 두꺼워 질수록 요소(해당 박스)의 크기가 커진다.

.container .box {
  width: 200px;
  height: 200px;
  background-color:gold;
}

.container .box:first-child {
  border: 50px solid gold;
}

border-width : border라는 각각의 방향을 아우르는 단축 속성이며
두께, 종류, 색상을 이루어진 개별 속성이기도 하다. 

단축 속성 이란?
서로 다른 여러 가지 CSS 속성의 값을 지정할 수 있는 CSS 속성
e.g.
background 속성의
background-color
background-image
background-repeat
background-position (en-US)

---------------------------------
개별속성
개별속성으로 border-style: solid(실선) / dashed(파선) / dotted(점선)을 주로 사용한다. (점선 사용률 크지 않음)

border-color : 색상 표현
색상 이름	브라우저에 제공하는 색상 이름	e.g. red, tomato
Hex 색상코드	16진수 색상	e.g. #000, #FFF(#fff)
RGB	빛의 삼원색	e.g. rgb(255, 215, 0)
RGBA	빛의 삼원색 + 투명도	e.g. rgba(0, 0, 0, 0.5) / 투명도 0=투명, 0.5=반투명, 1=불투명

---------------------------------
border-방향-속성 단축 속성 (대표예시)

border-top: 두께 종류 색상;
.box {
  width: 200px;
  height: 200px;
  background-color:gold;
  margin: 25px;
  border-top: 5px solid #000; <!-- 주목! -->
}

border-top-width: 두께;
border-top-style: 종류;
border-top-color: 색상;
.box {
  width: 200px;
  height: 200px;
  background-color:gold;
  margin: 25px;
  border-top-width: 10px; <!-- 주목! -->
  border-top-style: dashed; <!-- 주목! -->
  border-top-color: #000; <!-- 주목! -->
}

---------------------------------
모서리 둥글게 (border-radius)

border-radius : 0 0 10px 0;
여기서 0은 단위를 붙이지 않기로 한다. 
.box {
  width: 200px;
  height: 200px;
  background-color:gold;
  margin: 25px;
  border-radius : 0 0 50px 0; <!-- 주목! -->
}

---------------------------------
크기 계산 (box-sizing) 
box의 사이즈를 150px로 지정하였으나
개발자 도구 확인하면 border, padding 값을 지정한 Box1은 270px로 출력된다. 

i.e.
Box1 가로 : 150px + 10px(좌) + 10px(우) + 50px(좌) + 50px(우) = 270px
Box2 세로 : 150px + 10px(좌) + 10px(우) + 50px(좌) + 50px(우) = 270px

이 처럼 box1과 box2의 크기를 맞추려 수동으로 셋팅하는 것에 한계가 보인다. 
여기서 box1의 가로, 세로 넓이를 없애고 box-sizing : border-box;를 추가하면 자동으로 box2와 동일한 사이즈로 맞출 수 있다. 

---------------------------------
넘침 제어(overflow)
부모와 자식 요소가 있다고 가정한다.

<body>
    <div class="parent">
      <div class="child"></div>
    </div>
</body>

.parent{
  width: 200px;
  height: 150px;
  margin: 20px;
  background-color: gold;
}

.child {
  height: 100px;
  background-color: darkorange;
}

여기서 자식의 가로 넓이를 부모보다 크게 설정하였을 때
.parent{
  width: 200px;
  height: 150px;
  margin: 20px;
  background-color: gold;
  overflow: hidden;   /* 부모요소에 적용 */
}

.child {
  width: 300px;   /* 더 크게 설정 */
  height: 100px;
  background-color: darkorange;
}

overflow : visible;
넘치는 영역을 그대로 보여준다.

overflow : hidden;
넘치는 영역이 잘려서 보인다.

overflow : scroll;
직관적으로 잘려서 보이지만
넘치는 영역의 내용을
사용자가 볼 수 있도록 한다. 

overflow : auto;
브라우저가 스트롤바를 만들지 자동으로 판단 후 생성한다. 
(가로는 넘치지 않아서 스트롤바 생성되지 않음)

개별 속성으로 overflow-x / overflow-y는 x축/y축 각각의 축을 명시하여 적용한다.

---------------------------------
출력 특성(display)

block요소는 가로 세로 값을 가지고 있는데
그에 반에 가로와 세로를 지정하지 못하는 span 요소는
display: block; 속성을 추가하여 가로, 세로를 바꿀 수 있는 요소로 활용을 많이 한다.

<body>
  <span class="parent">
    Evelyn.Kim
  </span>
</body>

body {
  margin: 20px;
}
.parent{
/*   display: block; */		/* 적용하지 않음! 이미지 블로그 참조 */
  width: 200px;
  height: 150px;
  background-color: gold;
}

.parent{
  display: block;		/* 적용 후! 이미지 블로그 참조 */
  width: 200px;
  height: 150px;
  background-color: gold;
}

---------------------------------
글꼴
font-style : 글자의 기울기;
font-weight : 글자의 두께 100 ~ 900 숫자 사용;
font-family: 글꼴(서체), "글 꼴(서체)", ... 글꼴계열;

글꼴 계열_serif (바탕체 계열)
글꼴 계열_sans-serif (고딕체 계열)
특징 : 웹에서 주로 보이는 글꼴 계열이다.
글꼴 계열_monospace (고정넓이 동등 글꼴 계열)
특징 : 글자 간 간격이 일정하여 가독성이 좋다. 코드 에디터에서 주로 사용.
글꼴 계열_cursive (필기체 계열)
글꼴 계열_fantasy (장식 글꼴 계열)

<body>
  <p>
    Lorem ipsum dolor, sit amet consectetur adipisicing elit. 
    Itaque porro aliquam animi! Libero, beatae consequuntur 
    vero minima assumenda quis quas mollitia, maxime non temporibus 
    magnam aut doloremque error sunt dolores.
  </p>
</body>

body {
  margin: 20px;
}
p {
  width: 300px;
  box-sizing: border-box;
  border: 3px solid darkorange;
/*   line-height: 1.4; */
}

여기서 글자 행간 간격은 line-height로 넣으면 된다. 

body {
  margin: 20px;
}
p {
  width: 300px;
  box-sizing: border-box;
  border: 3px solid darkorange;
  line-height: 1.4;		/* 추가 내용! */
}

---------------------------------
문자
text-indent : 50px (들여씌기), -50px (내어쓰기);
text-align : left, right, center 문자 정렬 방식 (수평 정렬);
text-decoration : none, underline, overline*(윗줄 잘 안씀), line-through(중앙선, 취소선)
a 태그로 연결된 글자는 기본적으로 파란색 글씨에 밑줄이 있다. (아래 예시 참조)

<body>
  <a href="www.google.com">Google</a>
</body>

body {
  margin: 20px;
}
a {
  display: block;
  width: 300px;
  height: 200px;
  /* color: #000; */
  font-size: 100px;
/*   text-decoration: none; */
  background-color: gold;
}

여기서 글자색 지정 및 밑줄 없애기 위해 text-decoration을 사용하면 된다.

body {
  margin: 20px;
}
a {
  display: block;
  width: 300px;
  height: 200px;
  color: #000;    /* 주목! */
  font-size: 100px;
  text-decoration: none;    /* 주목! */
  background-color: gold;
}

---------------------------------
배경
background-image : url("함수 경로 입력")요소의 배경 이미지로 삽입
<body>
  <div></div>
</body>

body {
  margin: 20px;
}
div {
  width: 200px;
  height: 200px;
  background-color: gold;
  background-image: url("https://s.pstatic.net/shopping.phinf/20240103_
  15/6a8a1221-4b79-4c18-be35-4bd3619a6671.jpg");		/* 링크 추가! */
};

background-size : 이미지 크기 제어 속성 (바둑판식 배열)
cover(더 긴 너비에 맞춰서 출력), contain(더 짧은 너비에 맞춰서 출력)

background-repeat : 반복 제어 속성

background-position : 요소의 배경 이미지 위치
방향으로 위치 결정 : 상,하,좌,우,center
단위로 x,y축 위치 결정 : 200px(x축) 50px(y축)

background-attachment : 배경 이미지 스크롤 특성 scroll, fixed;
background-attachment: scroll;
특징 : 스크롤 내리면 이미지가 올라간다.
background-attachment: fixed;
특징 : 스크롤 내려도 이미지는 화면에 고정되어 있다.

**패럴렉스(parallax)
스크롤에 따라 오브젝트와 배경 이미지가 시간차를 두고 변하는 기법.

---------------------------------

** (중요!) 배치 (원하는 위치에 배치하기)
position: absolute
위치를 지정하기 위한 기준을 설정해주는 속성
i.e. 기준을 먼저 잡고 위치값을 지정해야 한다. 

position: fixed
뷰포트 기준으로 배치
웹페이지 우하단 '맨 위로 올라가기' 버튼 경우, 해당 기능으로 구현가능.

요소 쌓인 순서(stack order)
예시와 함께 정리하자

---------------------------------
z-index
요소의 쌓임 정도를 지정하는 것
더 뒤에 쌓고 싶으면 -1이하로 설정할 것
css배치

---------------------------------
flex(정렬) - container
display : flex 를 통해 수평정렬 출력 가능
flex 부여한 container를 flex container라고 부르고
그 안에 블록 요소(박스)는 flex items라고 한다. 
