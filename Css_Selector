1. 기본
전체 선택자 (Universal Selector)
범위 안에 있는 모든 요소 선택
* {
    background-color:gold;
}

태그 선택자 (Type Selector)
태그 이름으로 요소 선택
단, 태그의 종류가 모든 요소를 구분할 만큼 고유한 것이 아니기에 원하는 요소를 조금 더 정확하게 집어낼 수 있는 class 선택자를 사용할 수 있다. 
div {
    background-color:gold;
}

클래스 선택자 (Class Selector)
class로 지정한 요소 선택 (중복 선택 가능)
.name {
    background-color:gold;
}

아이디 선택자 (ID Selector)
전역 속성 id 값을 통해 요소를 찾는 개념
#name {
    background-color:gold;
}

2. 복합
일치 선택자 (Basic Combinator)
두 요소를 동시에 만족하는 선택자
** 주의 : 태그 선택자는 맨 앞에 작성해야 컴퓨터가 태그 선택자 임을 인식할 수 있다. 
div.name {		/* 태그와 클래스를 동시에 충족시킨다. */
    background-color:gold;
}

자식 선택자 (Child Combinator)
해당 선택자의 자식 요소 선택
div>.profile {
    background-color:gold;
}

<body>
    <div> <!-- div의 -->
        <ul class="profile"> <!-- .profile 자식 요소 선택자 -->
            <li class="name">Tom</li>
            <li class="age">28</li>
        </ul>
    </div>
    <div> <!-- div의 -->
        <ul class="profile"> <!-- .profile 자식 요소 선택자 -->
            <li class="name">Nate</li>
            <li class="age">33</li>
        </ul>
    </div>
    <span class="name">Joon</span>
</body>

하위(후손) 선택자 (Descendant Combinator)
해당 선택자의 하위에 있는 요소 선택
** 주의 : 띄어쓰기가 선택자 기호이다. (아래 예시 참조)
div .name {
    background-color:gold;
}
<body>
    <div> <!-- div의 -->
        <ul>
            <li class="name">Tom</li> <!-- .name 해당되는 하위 선택자 -->
            <li class="age">28</li>
        </ul>
    </div>
    <div> <!-- div의 -->
        <ul>
            <li class="name">Nate</li> <!-- .name 해당되는 하위 선택자 -->
            <li class="age">33</li>
        </ul>
    </div>
    <span class="name">Joon</span>
</body>

인접 형제 선택자 (Adjacent Sibling Combinator) 꼭 기억 해두자!
선택자의 다음에 해당하는 형제 요소 하나를 선택
.age+li {
    background-color:gold;
}
<body>
    <div> 
        <ul class="profile"> 
            <li class="name">Tom</li>
            <li class="age">28</li> <!-- .age 선택자의 -->
            <li class="company">Kakao</li> <!-- 다음 형제 요소 -->
        </ul>
    </div>
    <div>
        <ul class="profile"> 
            <li class="name">Nate</li>
            <li class="age">33</li> <!-- .age 선택자의 -->
            <li class="company">Line</li> <!-- 다음 형제 요소 -->
        </ul>
    </div>
    <span class="name">Joon</span>
</body>

일반 형제 선택자 (General Sibling Combinator)
선택자의 다음에 해당하는 형제 요소 모두 선택
.age~li {
    background-color:gold;
}
<body>
    <div> 
        <ul class="profile">
            <li class="name">Tom</li>
            <li class="age">28</li> <!-- .age의 --> 
            <li class="company">Kakao</li> <!-- 다음 형제요소 모두 선택자 -->
            <li class="addr">Seoul</li> <!-- 다음 형제요소 모두 선택자 -->
        </ul>
    </div>
    <div>
        <ul class="profile"> 
            <li class="name">Nate</li>
            <li class="age">33</li> <!-- .age의 --> 
            <li class="company">Line</li> <!-- 다음 형제요소 모두 선택자 -->
            <li class="addr">GyeongGi</li> <!-- 다음 형제요소 모두 선택자 -->
        </ul>
    </div>
</body>

3. 가상 클래스
:hover ** 자주 사용하는 선택자
마우스를 올렸을 때 변화하는 상태를 만들어 준다. (단, 이 외는 웬만하면 Js로 만든다.)
<body>
    <div class="box"></div>
</body>
div {
  width: 100px;
  height: 100px;
  background-color:orange;
}
div:hover {
  width: 250px;
}

** 함께 사용하면 효과보는 요소
전환 효과 (Transition)
div {
  width: 100px;
  height: 100px;
  background-color:orange;
  transition: 1s; /* 전환효과로 길게 늘어난다. */
}
div:hover {
  width: 250px;
}

:active 
마우스를 올려서 클릭하고 유지하는 동안 변화한다.

:focus
사용자에게 데이터를 입력받는 요소에 마우스를 올려서 클릭 후 활성화 된 상태포커스 후 선택한다. (Html 대화형 콘텐츠에만 해당)

** 포커스가 가능한 요소에서만 작동이 된다.
input, a, label, select, button, textarea 등 

그럼 포커스가 가능하지 않는 요소에 :focus를 작동할 수 있을까? 🤔
대답은 YES!!

e.g. Html div 요소에 tabindex='-1' 추가하면 아래와같이 포커스가 되는 것을 볼 수 있다. 
i.e. Tab키를 통해 포커스 가능한 순서를 지정하는 것이다. 


4. (동작을 처리하지 않는) 가상 선택자 (pseudo-classes)
:hover, :active, :focus는 Js에서 다루는 Css 동작 처리가 가능하다.
단, Css는 동작을 처리하는 개념이 아니기에 극히 일부분에 해당된다.

:first-child
첫 번째 자식이면 선택하는 선택자 (가상 선택자 기호인 : 으로 시작)

<div class="box" tabindex="-1"></div><br/>
.box:focus {
  background-color: lightblue;
}

5. 속성
